name: Node.js CI with Docker Deploy

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # 코드 체크아웃
    - uses: actions/checkout@v3

    # Node.js 설정
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # .env 파일 생성 및 환경 변수 로드
    - name: Create .env file from ENV
      run: |
        echo "${{ secrets.ENV }}" > .env
        export $(cat .env | xargs) # 환경 변수로 로드
        ls -la .env # 파일 생성 확인
        cat .env    # 내용 확인
      shell: bash

    # db.config.js 파일 생성
    - name: Create db.config.js file
      run: |
        mkdir -p config
        echo "import mysql from 'mysql2/promise';" > config/db.config.js
        echo "import dotenv from 'dotenv';" >> config/db.config.js
        echo "import { PrismaClient } from '@prisma/client';" >> config/db.config.js
        echo "" >> config/db.config.js
        echo "export const prisma = new PrismaClient();" >> config/db.config.js
        echo "" >> config/db.config.js
        echo "dotenv.config();" >> config/db.config.js
        echo "" >> config/db.config.js
        echo "export const pool = mysql.createPool({" >> config/db.config.js
        echo "  host: '${DB_HOST}'," >> config/db.config.js
        echo "  user: '${DB_USER}'," >> config/db.config.js
        echo "  port: ${DB_PORT}," >> config/db.config.js
        echo "  database: '${DB_TABLE}'," >> config/db.config.js
        echo "  password: '${DB_PASSWORD}'," >> config/db.config.js
        echo "  waitForConnections: true," >> config/db.config.js
        echo "  connectionLimit: 10," >> config/db.config.js
        echo "  queueLimit: 0," >> config/db.config.js
        echo "});" >> config/db.config.js
      shell: bash

    # 원격 서버의 .env 초기화
    - name: Initialize remote .env path
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        port: 22
        script: |
          if [ -d "/home/ubuntu/.env" ]; then
            sudo rm -rf /home/ubuntu/.env
          elif [ -f "/home/ubuntu/.env" ]; then
            sudo rm /home/ubuntu/.env
          fi

    # .env 파일 원격 서버로 전송
    - name: Transfer .env to remote server
      uses: appleboy/scp-action@v0.1.3
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        source: ".env"
        target: "/home/ubuntu/.env"
        overwrite: true

    # Node.js 프로젝트 의존성 설치 및 빌드
    - name: Install dependencies and build
      run: |
        npm install
        npm run build
        npm run start # 필요 시 실행

    # 도커 이미지 빌드 및 Docker Hub에 푸시
    - name: Build and push Docker image
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}

    # 원격 서버에 접속 후 도커 이미지 Pull 및 실행
    - name: Deploy to remote server
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        port: 22
        script: |
          sudo docker container stop $(sudo docker ps -q --filter ancestor=${{ secrets.DOCKER_REPO }}) || true
          sudo docker container rm $(sudo docker ps -a -q --filter ancestor=${{ secrets.DOCKER_REPO }}) || true
          sudo docker image rm ${{ secrets.DOCKER_REPO }} || true
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 8080:8080 --env-file /home/ubuntu/.env ${{ secrets.DOCKER_REPO }}
