// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  email                 String?  @unique(map: "email") @db.VarChar(255)
  password              String?  @db.VarChar(255)
  name                  String?  @db.VarChar(100)
  dormitory             String?  @db.VarChar(15)
  dormitoryDuration     String?  @db.VarChar(15)
  department            String?  @db.VarChar(50)
  gender                String?  @db.VarChar(15)
  studentId             String?  @map("student_id") @db.VarChar(15)
  lifestyle             String?  @db.VarChar(15)
  birth                 DateTime? @db.Date
  phoneNumber           String?  @db.VarChar(15)
  alarm                 String?  @db.VarChar(15) 
  isSmoking             Boolean?  @map("is_smoking")
  imageData             Bytes?    @map("image_data")
  wakeUpTime            String?   @map("wake_up_time") @db.VarChar(10)
  sleepingTime          String?   @map("sleeping_time") @db.VarChar(10)
  lightOutTime          String?   @map("light_out_time") @db.VarChar(10)
  showerTime            String?   @map("shower_time") @db.VarChar(15)
  cleaningFrequency     String?   @db.VarChar(15)
  itemSharingPreference String?   @db.VarChar(15)
  gamePreferences       GamePreference[] @relation("UserToGame")
  studyPreferences      StudyPreference[] @relation("UserToStudy")
  foodPreferences       FoodPreference[] @relation("UserToFood")
  sleepingHabits        SleepingHabit[] @relation("UserToSleeping")
  acLevel               String?   @map("ac_level") @db.VarChar(15)
  mbti                  String?   @db.VarChar(4)
  selectedFilters       String?   @map("selected_filters") @db.Text
  posts                 Post[]
  sentMessages          Message[] @relation("SentMessages")
  receivedMessages      Message[] @relation("ReceivedMessages")
  comments              Comment[]
  @@map("user")
}
model GamePreference {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users User[] @relation("UserToGame", map: "gamePreference_user_fkey")
}

model StudyPreference {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users User[] @relation("UserToStudy", map: "studyPreference_user_fkey")
}

model FoodPreference {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users User[] @relation("UserToFood", map: "foodPreference_user_fkey")
}

model SleepingHabit {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  users User[] @relation("UserToSleeping", map: "sleepingHabit_user_fkey")
}

model Post {
  id        Int      @id @default(autoincrement())        // 게시글 ID
  title     String?   @db.VarChar(255)                    // 게시글 제목
  content   String?                                       // 게시글 내용
  authorId  Int?                                          // 작성자 ID
  author    User?     @relation(fields: [authorId], references: [id]) // 작성자 관계
  createdAt DateTime? @default(now())                     // 작성일
  likes     Int       @default(0)                         // 좋아요 수 (기본값 0)
  comments  Comment[] // 반대 관계 추가
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  postId    Int       // 연결된 게시글 ID
  post      Post      @relation(fields: [postId], references: [id])
  authorId  Int       // 댓글 작성자 ID
  author    User      @relation(fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int      // 메시지 발신자
  receiverId Int      // 메시지 수신자
  content    String   @db.Text // 메시지 내용 
  createdAt  DateTime @default(now()) // 메시지 생성 시간

  // 관계 설정
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
