// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  password      String   @db.VarChar(255)
  name          String   @db.VarChar(100)
  dormitory     String   @db.VarChar(15)
  department    String   @db.VarChar(15)
  gender        String   @db.VarChar(15)
  studentId     String   @db.VarChar(15)
  lifestyle     String   @db.VarChar(15)
  birth         DateTime @db.Date
  isSmoking     Boolean  @map("is_smoking") 
  imageUrl      String?  @map("image_url") @db.VarChar(255)
  wakeUpTime    DateTime @map("wake_up_time") @db.Time
  sleepingTime  DateTime @map("sleeping_time") @db.Time
  lightOutTime  DateTime @map("light_out_time") @db.Time
  showerTime    DateTime @map("shower_time") @db.Time
  sleepingHabits SleepingHabit[]
  acLevel       String  @map("ac_level") @db.VarChar(15)
  posts    Post[]

  @@map("user")
}

model SleepingHabit {
  id         Int    @id @default(autoincrement())
  habit      String @db.VarChar(255) // 잠버릇 내용
  userId     Int    @map("user_id") // User와 연결
  user       User   @relation(fields: [userId], references: [id])

  @@map("sleeping_habit")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}
