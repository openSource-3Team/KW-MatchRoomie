// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int      @id @default(autoincrement())
  email                 String?  @unique(map: "email") @db.VarChar(255)
  password              String?  @db.VarChar(255)
  name                  String?  @db.VarChar(100)
  dormitory             String?  @db.VarChar(15)
  dormitoryDuration     String?  @db.VarChar(15)                // 기숙사 생활 기간
  department            String?  @db.VarChar(50)
  gender                String?  @db.VarChar(15)
  studentId             String?  @map("student_id") @db.VarChar(15)
  lifestyle             String?  @db.VarChar(15)
  birth                 DateTime? @db.Date
  phoneNumber String? @db.VarChar(15)
  selectedAlarm String? @db.VarChar(15) 
  isSmoking             Boolean?  @map("is_smoking")
  imageUrl              String?  @map("image_url") @db.VarChar(255)
  wakeUpTime            String?   @map("wake_up_time") @db.VarChar(10)
  sleepingTime          String?   @map("sleeping_time") @db.VarChar(10)
  lightOutTime          String?   @map("light_out_time") @db.VarChar(10)
  showerTime            String?   @map("shower_time") @db.VarChar(15)
  cleaningFrequency     String?   @db.VarChar(15)               // 청소 주기
  itemSharingPreference String?   @db.VarChar(15)               // 물건 공유 여부
  gamePreference        String?   @db.VarChar(50)               // 방에서 게임
  studyPreference       String?   @db.VarChar(50)               // 방 안 공부
  foodPreference        String?   @db.VarChar(50)               // 방 안 음식물 섭취
  acLevel               String?   @map("ac_level") @db.VarChar(15)
  mbti                  String?   @db.VarChar(4)                // MBTI 추가
  selectedFilters       String?   @map("selected_filters") @db.Text
  sleepingHabits        SleepingHabit[]                         // 잠버릇 관계
  posts                 Post[]                                  // 관계는 유지
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")

  @@map("user")
}


model SleepingHabit {
  id         Int    @id @default(autoincrement())         // 선택적
  habit      String? @db.VarChar(255)                     // 선택적
  userId     Int?    @map("user_id")                      // 선택적
  user       User?   @relation(fields: [userId], references: [id]) // 선택적 관계

  @@map("sleeping_habit")
}

model Post {
  id        Int      @id @default(autoincrement())        // 선택적
  title     String?   @db.VarChar(255)                    // 선택적
  content   String?                                       // 선택적
  authorId  Int?                                          // 선택적
  author    User?     @relation(fields: [authorId], references: [id]) // 선택적 관계
  createdAt DateTime? @default(now())                     // 선택적
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int      // 메시지 발신자
  receiverId Int      // 메시지 수신자
  content    String   @db.Text // 메시지 내용
  createdAt  DateTime @default(now()) // 메시지 생성 시간

  // 관계 설정
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}
